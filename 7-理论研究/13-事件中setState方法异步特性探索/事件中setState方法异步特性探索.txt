
一、setState方法

为了更为可观的性能，React可能会推迟它，稍后会一次性更新这些组件。
React不会保证在setState之后，能够立刻拿到改变的结果，setState调用后
不能保证同步执行。

在事件调用中的表现是异步的。所以不能再调用后，依赖前一个值去计算下一个
state（状态）

在某一个定时器里，表现是同步的，是分情况的

语法：
	setState(updater,[callback])


二、出现的问题：✔
1、多次调用setState，只计算了一次
	解决：可以给setState传入函数，函数接收state作为参数，是对先前
		state的引用

2、拿到更新后的值
	解决：callback会在DOM更新后执行，可以拿到更新后的值
	数据更新之后，DOM也更新之后，会触发这个回调，用来操作页面中的元素







